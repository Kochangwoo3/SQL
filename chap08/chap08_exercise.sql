-- 8장 조인
-- 8-1  카티션 곱
SELECT * FROM EMP;   -- 14
SELECT * FROM DEPT;  --  4
SELECT 14 * 4 FROM DUAL; -- 56
SELECT *
  FROM EMP, DEPT 
 ORDER BY EMPNO; 
 
 -- 8-2 동등조인
 SELECT *
  FROM EMP, DEPT
 WHERE EMP.DEPTNO = DEPT.DEPTNO 
 ORDER BY EMPNO; 
 
-- 8-3
SELECT E.EMPNO, E.ENAME, D.DNAME, D.DEPTNO
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
 ORDER BY E.EMPNO;
 
 SELECT J.JOB_ID, J.JOB_TITLE
      , H.START_DATE, H.END_DATE
   FROM JOBS J
      , JOB_HISTORY H
  WHERE J.JOB_ID = H.JOB_ID(+)
 ;

SELECT J.JOB_ID, J.JOB_TITLE
      , H.START_DATE, H.END_DATE
   FROM JOBS J
      , (SELECT JOB_ID
              , MIN(START_DATE) START_DATE
              , MAX(END_DATE) END_DATE
          FROM JOB_HISTORY
         GROUP BY JOB_ID) H
  WHERE J.JOB_ID = H.JOB_ID(+)
 ; 
 
 SELECT COUNT(*) FROM JOBS;
 
 SELECT E.EMPLOYEE_ID,E.FIRST_NAME,  E.LAST_NAME
      , D.DEPARTMENT_NAME
   FROM EMPLOYEES E, DEPARTMENTS D
  WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID(+);
  
 SELECT *
   FROM LOCATIONS L, COUNTRIES C
  WHERE L.COUNTRY_ID = C.COUNTRY_ID; -- 동등조인
   
 SELECT * 
   FROM COUNTRIES;
 
 -- 8-4 두 테이블에서 국가코드가 똑 같은 이름
 --   주의: 열의 정의가 애매합니다  테이블 지정.컬럼명
 select  l.location_id
       , C.COUNTRY_ID, C.COUNTRY_NAME
   FROM LOCATIONS L, COUNTRIES C
  WHERE L.COUNTRY_ID = C.COUNTRY_ID; -- 동등조인
  
--8-5
SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME, D.LOC
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
 ORDER BY D.DEPTNO, E.EMPNO;
  
-- 8-6 급여가 3000 이상인 직원정보와 부서정보
 SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME, D.LOC
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO 
   AND E.SAL >= 3000;
   
-- 1분복습  EMP, DEPT 조인했을때
-- 급여가 2500 이하이고  사원번호가 9999 이하인 정보가 출력
SELECT E.EMPNO, E.ENAME, E.SAL, E.DEPTNO
     , D.DNAME, D.LOC
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND E.SAL <= 2500
   AND E.EMPNO <= 9999
 ORDER BY E.EMPNO;

-- 비등가 조인 : 등가조인 이외 방식

-- 8-7 급여 범위를 지정하는 조건식으로 조인
SELECT * 
  FROM EMP E, SALGRADE S
 WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

SELECT *
  FROM EMPLOYEES E, JOBS J
 WHERE E.SALARY BETWEEN J.MIN_SALARY AND J.MAX_SALARY;

SELECT *
  FROM EMPLOYEES E, JOB_HISTORY H
 WHERE E.HIRE_DATE BETWEEN H.START_DATE AND H.END_DATE;

-- 자체 조인
SELECT *
  FROM EMP E;
   
SELECT E.EMPNO, E.ENAME 사원명 , M.ENAME 관리자명
  FROM EMP E, EMP M
 WHERE E.MGR = M.EMPNO;

SELECT E.EMPLOYEE_ID, E.FIRST_NAME || ' ' || E.LAST_NAME 사원명
     , E.MANAGER_ID , M.FIRST_NAME || ' ' || M.LAST_NAME 관리자명   
  FROM EMPLOYEES E, EMPLOYEES M
 WHERE E.MANAGER_ID = M.EMPLOYEE_ID ;
--  8-9 14 명 외부조인 직원 정보 위주 모두 
SELECT E.EMPNO, E.ENAME 사원명 , M.ENAME 관리자명
  FROM EMP E, EMP M
 WHERE E.MGR = M.EMPNO(+); -- LEFT OUTER JOIN
 
SELECT E.EMPNO, E.ENAME 사원명 FROM EMP E;
 -- 8-10
SELECT E.EMPNO, E.ENAME 사원명 , M.ENAME 관리자명
  FROM EMP E, EMP M
 WHERE E.MGR(+) = M.EMPNO; -- RIGHT OUTER JOIN

-- join 중간문제
SELECT c.country_name, l.state_province, l.street_address
  FROM COUNTRIES C, LOCATIONS L
 WHERE C.COUNTRY_ID = l.country_id ;

SELECT J.JOB_ID, J.JOB_TITLE
     , H.START_DATE, H.END_DATE
  FROM JOBS J, JOB_HISTORY H
 WHERE J.JOB_ID = H.JOB_ID ;

SELECT E.FIRST_NAME, E.LAST_NAME
     , D.DEPARTMENT_NAME, J.JOB_TITLE
  FROM EMPLOYEES E, DEPARTMENTS D, JOBS J
 WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
   AND E.JOB_ID = J.JOB_ID;
 
 --------------------------------
SELECT C.COUNTRY_ID, C.COUNTRY_NAME
    -- , COUNT(L.CITY)
      , L.CITY
  FROM COUNTRIES C, LOCATIONS L
 WHERE C.COUNTRY_ID = L.COUNTRY_ID(+)
 ORDER BY C.COUNTRY_ID;
 
--GROUP BY C.COUNTRY_ID, C.COUNTRY_NAME;

SELECT L.LOCATION_ID, L.CITY, L.COUNTRY_ID
  FROM LOCATIONS L, COUNTRIES C
 WHERE L.COUNTRY_ID = C.COUNTRY_ID
  ;
  
 
 SELECT * FROM LOCATIONS WHERE COUNTRY_ID = 'CH'; 
 
 
SELECT COUNT(*) FROM COUNTRIES; -- 25
SELECT COUNT(*) FROM LOCATIONS; -- 23

SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME
     , E.DEPARTMENT_ID, D.DEPARTMENT_NAME 
  FROM EMPLOYEES E, DEPARTMENTS D
 WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID(+)
 ORDER BY E.EMPLOYEE_ID;
 
 SELECT *
   FROM DEPARTMENTS;
 
 
SELECT E.FIRST_NAME || ' ' || E.LAST_NAME 직원명
     , M.FIRST_NAME || ' ' || M.LAST_NAME 관리자명
  FROM EMPLOYEES E, EMPLOYEES M
 WHERE E.MANAGER_ID = M.EMPLOYEE_ID
 ORDER BY E.EMPLOYEE_ID;
 
 -- SQL-99
 -- NATURAL JOIN   : 등가 조인 대신
 SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR,E.HIREDATE
      , E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
   FROM EMP E NATURAL JOIN DEPT D
  ORDER BY DEPTNO, E.EMPNO;
  
-- JOIN ~ USING
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR,E.HIREDATE
      , E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
   FROM EMP E JOIN DEPT D USING(DEPTNO)
  WHERE SAL >= 3000
  ORDER BY DEPTNO, E.EMPNO;
 
 -- JOIN ~ ON
 SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR,E.HIREDATE
      , E.SAL, E.COMM, D.DEPTNO, D.DNAME, D.LOC
   FROM EMP E JOIN DEPT D ON(E.DEPTNO = D.DEPTNO)
  WHERE SAL >= 3000
  ORDER BY E.DEPTNO, E.EMPNO;
 
 SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, E.DEPARTMENT_ID
     -- , DEPARTMENT_NAME
  FROM EMPLOYEES E, DEPARTMENTS D
 WHERE E.DEPARTMENT_ID  = D.DEPARTMENT_ID(+);
 
 SELECT DEPARTMENT_ID, DEPARTMENT_NAME
   FROM DEPARTMENTS;
   
SELECT E.EMPNO, E.ENAME, E.MGR, M.ENAME 관리자명
  FROM EMP E, EMP M
 WHERE E.MGR = M.EMPNO(+) ;
   
 --8-14   SQL-99 외부조인
 SELECT E.EMPNO, E.ENAME, E.MGR, M.ENAME 관리자명, d.dname
  FROM EMP E LEFT OUTER JOIN EMP M ON (E.MGR = M.EMPNO)  -- 14
   JOIN DEPT D ON (E.DEPTNO = D.DEPTNO);
   
-- 1분 복습
-- JOIN ~ USING   EMP, DEPT 조인 SQL99  DEPTNO
--   급여는 3000이상이며 직속상관이 반드시 있어야 합니다.
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM
     , D.DNAME, D.LOC
  FROM EMP E JOIN DEPT D USING(DEPTNO)
 WHERE E.SAL >= 3000 AND E.MGR IS NOT NULL
 ORDER BY DEPTNO, E.EMPNO;
     
   
   
SELECT E.EMPNO, E.ENAME, E.MGR, M.ENAME 관리자명
  FROM EMP E RIGHT OUTER JOIN EMP M ON (E.MGR = M.EMPNO); -- 21
  
SELECT E.EMPNO, E.ENAME, E.MGR, M.ENAME 관리자명
  FROM EMP E FULL OUTER JOIN EMP M ON (E.MGR = M.EMPNO);   -- 22
